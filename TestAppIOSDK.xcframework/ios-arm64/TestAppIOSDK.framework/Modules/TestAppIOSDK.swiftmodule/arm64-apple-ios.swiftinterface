// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TestAppIOSDK
import AVFoundation
import AVKit
import CoreGraphics
import FileProvider
import Foundation
import Photos
import PhotosUI
import ReplayKit
import Security
import Swift
import TUSKit
import UIKit
import UserNotifications
import _Concurrency
public typealias Constraint = UIKit.NSLayoutConstraint
public typealias Constraints = [TestAppIOSDK.Constraint]
public enum ConstraintRelation : Swift.Int {
  case equal
  case equalOrLess
  case equalOrGreater
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Collection where Self.Element == TestAppIOSDK.Constraint {
  public func activate()
  public func deActivate()
}
extension UIKit.NSLayoutConstraint {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func with(_ p: TestAppIOSDK.LayoutPriority) -> Self
  @_Concurrency.MainActor(unsafe) public func set(_ active: Swift.Bool) -> Self
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: TestAppIOSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: TestAppIOSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: TestAppIOSDK.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
extension TestAppIOSDK.Constrainable {
  @discardableResult
  public func center(in view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGPoint = .zero, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func edges(to view: TestAppIOSDK.Constrainable, excluding excludedEdge: TestAppIOSDK.LayoutEdge = .none, insets: TestAppIOSDK.TinyEdgeInsets = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func size(_ size: CoreGraphics.CGSize, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func size(to view: TestAppIOSDK.Constrainable, multiplier: CoreGraphics.CGFloat = 1, insets: CoreGraphics.CGSize = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func origin(to view: TestAppIOSDK.Constrainable, insets: TestAppIOSDK.TinyEdgeInsets = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func width(_ width: CoreGraphics.CGFloat, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func width(to view: TestAppIOSDK.Constrainable, _ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func widthToHeight(of view: TestAppIOSDK.Constrainable, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func width(min: CoreGraphics.CGFloat? = nil, max: CoreGraphics.CGFloat? = nil, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func height(_ height: CoreGraphics.CGFloat, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func height(to view: TestAppIOSDK.Constrainable, _ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func heightToWidth(of view: TestAppIOSDK.Constrainable, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func height(min: CoreGraphics.CGFloat? = nil, max: CoreGraphics.CGFloat? = nil, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraints
  @discardableResult
  public func aspectRatio(_ ratio: CoreGraphics.CGFloat, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func leadingToTrailing(of view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func leading(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func leftToRight(of view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func left(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func trailingToLeading(of view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func trailing(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func rightToLeft(of view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func right(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func topToBottom(of view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func top(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func bottomToTop(of view: TestAppIOSDK.Constrainable, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func bottom(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func centerX(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutXAxisAnchor? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
  @discardableResult
  public func centerY(to view: TestAppIOSDK.Constrainable, _ anchor: UIKit.NSLayoutYAxisAnchor? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true) -> TestAppIOSDK.Constraint
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setHugging(_ priority: TestAppIOSDK.LayoutPriority, for axis: TestAppIOSDK.ConstraintAxis)
  @_Concurrency.MainActor(unsafe) public func setCompressionResistance(_ priority: TestAppIOSDK.LayoutPriority, for axis: TestAppIOSDK.ConstraintAxis)
}
public struct TestAppConfiguration {
  public enum Invocation {
    case shake
    case trippleTap
    public static func == (a: TestAppIOSDK.TestAppConfiguration.Invocation, b: TestAppIOSDK.TestAppConfiguration.Invocation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(invocations: [TestAppIOSDK.TestAppConfiguration.Invocation])
}
@_hasMissingDesignatedInitializers public class TestAppio {
  public static var shared: TestAppIOSDK.TestAppio!
  @objc public func show()
  @objc public func hide()
  @objc deinit
}
extension TestAppIOSDK.TestAppio {
  public static func setup(with configuration: TestAppIOSDK.TestAppConfiguration)
  @available(iOS 13.0, *)
  public static func setup(scene: UIKit.UIWindowScene, with configuration: TestAppIOSDK.TestAppConfiguration)
  public static func identify(apiToken: Swift.String, userID: Swift.String, traits: [Swift.String : Swift.String])
}
extension UIKit.UIImage {
  public var template: UIKit.UIImage {
    get
  }
  public var original: UIKit.UIImage {
    get
  }
}
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) public func setAbsoluteTextInsets(insets: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) public func newHeight(withBaseHeight baseHeight: CoreGraphics.CGFloat, maxHeight: CoreGraphics.CGFloat = .greatestFiniteMagnitude) -> CoreGraphics.CGFloat
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var layerCornerRadius: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderWidth: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var layerShadowColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var layerShadowOpacity: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var layerShadowOffset: CoreGraphics.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var layerShadowRadius: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var shadowPath: CoreGraphics.CGPath? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func makeRound()
  @_Concurrency.MainActor(unsafe) public func clipSubviews(_ clip: Swift.Bool)
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) public var roundedCorners: QuartzCore.CACornerMask {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var safeInsets: UIKit.UIEdgeInsets {
    get
  }
}
extension CoreGraphics.CGSize {
  public var minSide: CoreGraphics.CGFloat {
    get
  }
  public var maxSide: CoreGraphics.CGFloat {
    get
  }
  public init(side: CoreGraphics.CGFloat)
  public func maxSize(with ratio: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
}
extension CoreGraphics.CGPoint {
  public static func - (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  public static func + (lhs: CoreGraphics.CGPoint, rhs: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func stack(_ views: [TestAppIOSDK.TinyView], axis: TestAppIOSDK.ConstraintAxis = .vertical, width: CoreGraphics.CGFloat? = nil, height: CoreGraphics.CGFloat? = nil, spacing: CoreGraphics.CGFloat = 0) -> TestAppIOSDK.Constraints
}
public protocol UIIdentifiable {
  static var identifier: Swift.String { get }
}
extension TestAppIOSDK.UIIdentifiable {
  public static var identifier: Swift.String {
    get
  }
}
public enum SupplementaryViewKind {
  case header
  case footer
  case custom(Swift.String)
  public var kind: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func register<Cell>(_ type: Cell.Type) where Cell : UIKit.UICollectionViewCell, Cell : TestAppIOSDK.UIIdentifiable
  @_Concurrency.MainActor(unsafe) public func register<T>(_ type: T.Type, forSupplementaryViewOfKind kind: TestAppIOSDK.SupplementaryViewKind) where T : UIKit.UICollectionReusableView, T : TestAppIOSDK.UIIdentifiable
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func dequeue<R>(for indexPath: Foundation.IndexPath) -> R where R : UIKit.UICollectionViewCell, R : TestAppIOSDK.UIIdentifiable
  @_Concurrency.MainActor(unsafe) public func dequeueSupplementaryView<R>(for indexPath: Foundation.IndexPath, kind: Swift.String) -> R where R : UIKit.UICollectionReusableView, R : TestAppIOSDK.UIIdentifiable
  @_Concurrency.MainActor(unsafe) public func dequeue<R>(_ type: R.Type, for indexPath: Foundation.IndexPath) -> R where R : UIKit.UICollectionViewCell, R : TestAppIOSDK.UIIdentifiable
  @_Concurrency.MainActor(unsafe) public func dequeueSupplementaryView<R>(_ type: R.Type, for indexPath: Foundation.IndexPath, kind: Swift.String) -> R where R : UIKit.UICollectionReusableView, R : TestAppIOSDK.UIIdentifiable
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
extension UIKit.UIView : TestAppIOSDK.Constrainable {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func prepareForLayout() -> Self
}
extension UIKit.UILayoutGuide : TestAppIOSDK.Constrainable {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func prepareForLayout() -> Self
}
public protocol Constrainable {
  var topAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var bottomAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var leftAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var rightAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var leadingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var trailingAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var centerXAnchor: UIKit.NSLayoutXAxisAnchor { get }
  var centerYAnchor: UIKit.NSLayoutYAxisAnchor { get }
  var widthAnchor: UIKit.NSLayoutDimension { get }
  var heightAnchor: UIKit.NSLayoutDimension { get }
  @discardableResult
  func prepareForLayout() -> Self
}
extension UIKit.UIControl.State : Swift.Hashable {
}
extension UIKit.UIEdgeInsets {
  public static func uniform(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
  public static func top(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
  public static func left(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
  public static func bottom(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
  public static func right(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
  public static func horizontal(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
  public static func vertical(_ value: CoreGraphics.CGFloat) -> TestAppIOSDK.TinyEdgeInsets
}
public func + (lhs: TestAppIOSDK.TinyEdgeInsets, rhs: TestAppIOSDK.TinyEdgeInsets) -> TestAppIOSDK.TinyEdgeInsets
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: TestAppIOSDK.KeychainSwiftAccessOptions, b: TestAppIOSDK.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum WylerError : Swift.Error {
  case photoLibraryAccessNotGranted
  public static func == (a: TestAppIOSDK.WylerError, b: TestAppIOSDK.WylerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class ScreenRecorder {
  public init()
  final public func startRecording(to outputURL: Foundation.URL? = nil, size: CoreGraphics.CGSize? = nil, errorHandler: @escaping (Swift.Error) -> Swift.Void)
  final public func stoprecording(completion: @escaping () -> Swift.Void)
  @objc deinit
}
extension UIKit.UIView {
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func edgesToSuperview(excluding excludedEdge: TestAppIOSDK.LayoutEdge = .none, insets: TestAppIOSDK.TinyEdgeInsets = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraints
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leadingToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailingToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func horizontalToSuperview(insets: TestAppIOSDK.TinyEdgeInsets = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraints
  @available(tvOS 10.0, iOS 10.0, *)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func verticalToSuperview(insets: TestAppIOSDK.TinyEdgeInsets = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraints
}
public struct LayoutEdge : Swift.OptionSet {
  public let rawValue: Swift.UInt8
  public init(rawValue: Swift.UInt8)
  public static let top: TestAppIOSDK.LayoutEdge
  public static let bottom: TestAppIOSDK.LayoutEdge
  public static let trailing: TestAppIOSDK.LayoutEdge
  public static let leading: TestAppIOSDK.LayoutEdge
  public static let left: TestAppIOSDK.LayoutEdge
  public static let right: TestAppIOSDK.LayoutEdge
  public static let none: TestAppIOSDK.LayoutEdge
  public typealias ArrayLiteralElement = TestAppIOSDK.LayoutEdge
  public typealias Element = TestAppIOSDK.LayoutEdge
  public typealias RawValue = Swift.UInt8
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerInSuperview(offset: CoreGraphics.CGPoint = .zero, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraints
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func originToSuperview(insets: TestAppIOSDK.TinyEdgeInsets = .zero, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraints
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func widthToSuperview(_ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func heightToSuperview(_ dimension: UIKit.NSLayoutDimension? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leftToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func rightToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func topToSuperview(_ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottomToSuperview(_ anchor: UIKit.NSLayoutYAxisAnchor? = nil, offset: CoreGraphics.CGFloat = 0, relation: TestAppIOSDK.ConstraintRelation = .equal, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerXToSuperview(_ anchor: UIKit.NSLayoutXAxisAnchor? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerYToSuperview(_ anchor: UIKit.NSLayoutYAxisAnchor? = nil, multiplier: CoreGraphics.CGFloat = 1, offset: CoreGraphics.CGFloat = 0, priority: TestAppIOSDK.LayoutPriority = .required, isActive: Swift.Bool = true, usingSafeArea: Swift.Bool = false) -> TestAppIOSDK.Constraint
}
extension UIKit.UILayoutGuide {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func `in`(_ superView: UIKit.UIView) -> Self
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func `in`(_ superView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func `in`(_ stackView: UIKit.UIStackView) -> Self
}
public protocol Then {
}
extension TestAppIOSDK.Then {
  public func then(_ block: (inout Self) -> Swift.Void) -> Self
}
extension TestAppIOSDK.Then where Self : AnyObject {
  @discardableResult
  public func then(_ block: (Self) -> Swift.Void) -> Self
}
extension ObjectiveC.NSObject : TestAppIOSDK.Then {
}
public typealias TinyView = UIKit.UIView
public typealias LayoutGuide = UIKit.UILayoutGuide
public typealias ConstraintAxis = UIKit.NSLayoutConstraint.Axis
public typealias LayoutPriority = UIKit.UILayoutPriority
public typealias TinyEdgeInsets = UIKit.UIEdgeInsets
extension TestAppIOSDK.ConstraintRelation : Swift.Equatable {}
extension TestAppIOSDK.ConstraintRelation : Swift.Hashable {}
extension TestAppIOSDK.ConstraintRelation : Swift.RawRepresentable {}
extension TestAppIOSDK.TestAppConfiguration.Invocation : Swift.Equatable {}
extension TestAppIOSDK.TestAppConfiguration.Invocation : Swift.Hashable {}
extension TestAppIOSDK.KeychainSwiftAccessOptions : Swift.Equatable {}
extension TestAppIOSDK.KeychainSwiftAccessOptions : Swift.Hashable {}
extension TestAppIOSDK.WylerError : Swift.Equatable {}
extension TestAppIOSDK.WylerError : Swift.Hashable {}
